import{_ as a,c as e,o as s,a as n}from"./app.608363f2.js";const C=JSON.parse('{"title":"Flow Control","description":"","frontmatter":{},"headers":[{"level":2,"title":"Overview","slug":"overview","link":"#overview","children":[]},{"level":2,"title":"Conditions","slug":"conditions","link":"#conditions","children":[]},{"level":2,"title":"Foreach Loop","slug":"foreach-loop","link":"#foreach-loop","children":[]},{"level":2,"title":"For Loop","slug":"for-loop","link":"#for-loop","children":[]},{"level":2,"title":"Until Loop","slug":"until-loop","link":"#until-loop","children":[]},{"level":2,"title":"While Loop","slug":"while-loop","link":"#while-loop","children":[]},{"level":2,"title":"Counter Loop","slug":"counter-loop","link":"#counter-loop","children":[]},{"level":2,"title":"If / Then / Else Condition","slug":"if-then-else-condition","link":"#if-then-else-condition","children":[]},{"level":2,"title":"Subroutines","slug":"subroutines","link":"#subroutines","children":[]}],"relativePath":"Tasks/FlowControl.md"}'),t={name:"Tasks/FlowControl.md"},o=n(`<h1 id="flow-control" tabindex="-1">Flow Control <a class="header-anchor" href="#flow-control" aria-hidden="true">#</a></h1><h2 id="overview" tabindex="-1">Overview <a class="header-anchor" href="#overview" aria-hidden="true">#</a></h2><p>Task flow control is based on the following Tasker elements:</p><div class="language-text"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki"><code><span class="line"><span style="color:#A6ACCD;">- variable values</span></span>
<span class="line"><span style="color:#A6ACCD;">- conditions on individual actions</span></span>
<span class="line"><span style="color:#A6ACCD;">- If / Else / Endif actions for conditional grouping of following actions</span></span>
<span class="line"><span style="color:#A6ACCD;">- For / End For to do a set of actions once for each of a set of elements</span></span>
<span class="line"><span style="color:#A6ACCD;">- Goto action (jumping around within a task).</span></span>
<span class="line"><span style="color:#A6ACCD;">- Perform Task action (calling other tasks as subroutines)</span></span>
<span class="line"><span style="color:#A6ACCD;">- Stop action (terminate task immediately)</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><p>On the Wiki there is a detailed example of processing a file&#39;s content [External Link].</p><p>Tip: if you accidentally create a task that never ends when experimenting with loops, use the Kill button in the Task Edit screen to end it manually.</p><h2 id="conditions" tabindex="-1">Conditions <a class="header-anchor" href="#conditions" aria-hidden="true">#</a></h2><p>Every action can have a condition associated with it (specify this in the Action Edit screen). If the condition does not match, the action will be skipped.</p><p>A condition consists of an operator (&#39;equals&#39; etc) and two parameters. The possible operators are:</p><div class="language-text"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki"><code><span class="line"><span style="color:#A6ACCD;">- Equals (eq)</span></span>
<span class="line"><span style="color:#A6ACCD;">  The left parameter is identical to the right parameter.</span></span>
<span class="line"><span style="color:#A6ACCD;">- Doesn&#39;t Equal (neq)</span></span>
<span class="line"><span style="color:#A6ACCD;">  The left parameter is not identical to the right parameter.</span></span>
<span class="line"><span style="color:#A6ACCD;">- Matches (~)</span></span>
<span class="line"><span style="color:#A6ACCD;">  The right parameter is a pattern which the left parameter is matched against.</span></span>
<span class="line"><span style="color:#A6ACCD;">- Not Matches (!~)</span></span>
<span class="line"><span style="color:#A6ACCD;">  As above, but the match must fail for the action to be executed.</span></span>
<span class="line"><span style="color:#A6ACCD;">- Matches Regex (~R)</span></span>
<span class="line"><span style="color:#A6ACCD;">  The right parameter is a regular expression which the left parameter is matched against.</span></span>
<span class="line"><span style="color:#A6ACCD;">- Doesn&#39;t Match Regex (!~R)</span></span>
<span class="line"><span style="color:#A6ACCD;">  As above, but the match must fail for the action to be executed.</span></span>
<span class="line"><span style="color:#A6ACCD;">- Maths: Less Than (&lt;)</span></span>
<span class="line"><span style="color:#A6ACCD;">  Both parameters (after variables are substitued) must be numbers or mathematical expressions and the first must be less than the second e.g. 3 &lt; 6. See Maths for more info.</span></span>
<span class="line"><span style="color:#A6ACCD;">- Maths: Greater Than (&gt;)</span></span>
<span class="line"><span style="color:#A6ACCD;">  As above, but the first parameter must evaluate to more than the second.</span></span>
<span class="line"><span style="color:#A6ACCD;">- Maths: Equals (=)</span></span>
<span class="line"><span style="color:#A6ACCD;">  As above, but the two parameters must be numerically equal.</span></span>
<span class="line"><span style="color:#A6ACCD;">- Maths: Isn&#39;t Equal To (!=)</span></span>
<span class="line"><span style="color:#A6ACCD;">  As above, but the two parameters must be not numerically equal.</span></span>
<span class="line"><span style="color:#A6ACCD;">- Maths: Is Even (Even)</span></span>
<span class="line"><span style="color:#A6ACCD;">  The left parameter is an even number.</span></span>
<span class="line"><span style="color:#A6ACCD;">- Maths: Is Odd (Odd)</span></span>
<span class="line"><span style="color:#A6ACCD;">  The left parameter is an odd number.</span></span>
<span class="line"><span style="color:#A6ACCD;">- Is/Isn&#39;t Set (Set/!Set)</span></span>
<span class="line"><span style="color:#A6ACCD;">  Whether the specified variable has a value or not.</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><p>Expressions which are not mathematically valid e.g. I Am The Walrus &gt; 5 give a warning and evaluate to false when used with a mathematical operator.</p><h2 id="foreach-loop" tabindex="-1">Foreach Loop <a class="header-anchor" href="#foreach-loop" aria-hidden="true">#</a></h2><p>Goal: perform a set of actions for each of apple, pear and banana.</p><div class="language-text"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki"><code><span class="line"><span style="color:#A6ACCD;">1.For %item apple,pear,banana</span></span>
<span class="line"><span style="color:#A6ACCD;">  Loop once for each of apple, pear and banana</span></span>
<span class="line"><span style="color:#A6ACCD;">2.Action One</span></span>
<span class="line"><span style="color:#A6ACCD;">  Example: Flash %item</span></span>
<span class="line"><span style="color:#A6ACCD;">3.Action Two</span></span>
<span class="line"><span style="color:#A6ACCD;">  ...</span></span>
<span class="line"><span style="color:#A6ACCD;">4.End For</span></span>
<span class="line"><span style="color:#A6ACCD;">  Return to action 1 if we havn&#39;t done all the items yet</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><blockquote><p>Result: Action One and Action Two are performed three times. The first time, the variable %item is set to apple, the second time pear and the last time banana.</p></blockquote><p>You can insert a Goto action in the loop with either Top of Loop (meaning continue, skip to the next item straight away) or End of Loop (meaning break, stop without doing any more items) specified.</p><p>In adition to simple text, the For action accepts any comma-separated combination of these Items:</p><div class="language-text"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki"><code><span class="line"><span style="color:#A6ACCD;">- a numeric range e.g. 1:5 (= 1,2,3,4,5)</span></span>
<span class="line"><span style="color:#A6ACCD;">- a numeric range with a jump e.g. 8:2:-2 (= 8,6,4,2)</span></span>
<span class="line"><span style="color:#A6ACCD;">- a numeric range defined by variable values e.g. 2:%end:%skip, 1:%arr(#)</span></span>
<span class="line"><span style="color:#A6ACCD;">- a variable name (which is replaced) e.g. %fruit (= banana maybe)</span></span>
<span class="line"><span style="color:#A6ACCD;">- a variable array part e.g. %arr(1:2) (= %arr1, %arr2 = apple,banana maybe)</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><p>A common case is to use %arr(), which performs a loop for each element in the array %arr.</p><blockquote><p>Warning: the Values parameter in the loop is reevaluated with each iteration of the loop, meaning that modifying array variables which appear there from within the loop can have unexpected effects. To workaround that, it can be best to use the following sequence:</p></blockquote><div class="language-text"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki"><code><span class="line"><span style="color:#A6ACCD;">Variables Set, %values, %arrayWhichWillChange()</span></span>
<span class="line"><span style="color:#A6ACCD;">Variable Split, %values</span></span>
<span class="line"><span style="color:#A6ACCD;">For, %value, %values()</span></span>
<span class="line"><span style="color:#A6ACCD;">    ...</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><h2 id="for-loop" tabindex="-1">For Loop <a class="header-anchor" href="#for-loop" aria-hidden="true">#</a></h2><p>Goal:<br> perform a set of actions for each of a set of elements in turn. Use the Foreach Loop as described above, with the Items parameter being a range specification e.g. 4:0, 100, 0:8:2 (= 4,3,2,1,0,100,0,2,4,6,8).</p><h2 id="until-loop" tabindex="-1">Until Loop <a class="header-anchor" href="#until-loop" aria-hidden="true">#</a></h2><p>Goal: perform a Task X until some condition is met (at least once)</p><div class="language-text"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki"><code><span class="line"><span style="color:#A6ACCD;">1. Action One ...</span></span>
<span class="line"><span style="color:#A6ACCD;">2. Action Two ...</span></span>
<span class="line"><span style="color:#A6ACCD;">3. Goto 1 If %qtime &lt; 20  Return to action 1 if runtime &lt; 20</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><p>Result: Action One and Action Two are performed until %QTIME contains the value 20 or more i.e. until the task has been running for 20 seconds.</p><p>Note: %QTIME is a builtin local variable available in all tasks.</p><h2 id="while-loop" tabindex="-1">While Loop <a class="header-anchor" href="#while-loop" aria-hidden="true">#</a></h2><p>Goal: perform a Task X while some condition is met.</p><div class="language-text"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki"><code><span class="line"><span style="color:#A6ACCD;">1. Stop If %fruit Not Matches Apple  Stop task if it&#39;s not crunchy, otherwise go to next action</span></span>
<span class="line"><span style="color:#A6ACCD;">2. Action One ...</span></span>
<span class="line"><span style="color:#A6ACCD;">3. Action Two ...</span></span>
<span class="line"><span style="color:#A6ACCD;">4. Goto 1  Go back and see if we&#39;re still crunchy</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><p>Result: Action One and Action Two are performed while %fruit contains the value Apple.</p><h2 id="counter-loop" tabindex="-1">Counter Loop <a class="header-anchor" href="#counter-loop" aria-hidden="true">#</a></h2><p>Goal: perform a Task X a set number of times.</p><div class="language-text"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki"><code><span class="line"><span style="color:#A6ACCD;">1. Variable Set %count, 0  Initialize the counter</span></span>
<span class="line"><span style="color:#A6ACCD;">2. Action One Label: LoopStart  ...</span></span>
<span class="line"><span style="color:#A6ACCD;">3. Action Two     ...</span></span>
<span class="line"><span style="color:#A6ACCD;">4. Variable Add %count, 1  Add one to %count</span></span>
<span class="line"><span style="color:#A6ACCD;">5. Goto LoopStart If %count &lt; 10  Return to action 2 if count &lt; 10</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><p>Result: after initialization of %count to 0, the task loops around the actions from 2-5 until %count reaches 10, at which point the condition on the Goto fails and the end of the task is reached.</p><blockquote><p>Note that we used a Goto to a labelled action this time. In all but the very simplest tasks it&#39;s better to use a label rather than a number. It&#39;s easier to work out what&#39;s happening and if you insert or delete actions before the loop starts, the Goto will still jump to the right place.</p></blockquote><p>An alternative way to do this loop is to use a For action specified as 0:10.</p><h2 id="if-then-else-condition" tabindex="-1">If / Then / Else Condition <a class="header-anchor" href="#if-then-else-condition" aria-hidden="true">#</a></h2><p>Goal: perform certain Tasks if conditions are met, otherwise perform a different task.</p><div class="language-text"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki"><code><span class="line"><span style="color:#A6ACCD;">1. If %fruit ~ Apple  ~ is short for &#39;matches&#39;</span></span>
<span class="line"><span style="color:#A6ACCD;">2. Action One  ...</span></span>
<span class="line"><span style="color:#A6ACCD;">3. Action Two  ...</span></span>
<span class="line"><span style="color:#A6ACCD;">4. Else If %fruit ~ Pear  an Else action with a condition</span></span>
<span class="line"><span style="color:#A6ACCD;">5. Action Three  ...</span></span>
<span class="line"><span style="color:#A6ACCD;">6. Else</span></span>
<span class="line"><span style="color:#A6ACCD;">7. Action Four  ...</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><p>Result: actions One and Two are executed if %fruit matches Apple, Action Three is executed if %fruit matches Pear, otherwise Action Four is executed.</p><blockquote><p>Notes: you can have as many Else Ifs in a condition as you likeif your condition is in the middle of a more complicated task, you need to tell Tasker where the condition ends with an End If action</p></blockquote><h2 id="subroutines" tabindex="-1">Subroutines <a class="header-anchor" href="#subroutines" aria-hidden="true">#</a></h2><p>To call another task, use the Perform Task action. To use it as a subroutine, you just need to ensure that the priority of the calling task is less than the priority of the called task (more info: scheduling).</p><p>The parent can optionally pass values to the child and receive a result back:</p><ul><li><p>Parent Task</p><ol><li><p>Perform Task Child, Priority, 10 %par1, 5, Result Value Variable, %result pass 5 to the child, expect a result in %result</p></li><li><p>Variable Flash Result: %result what did we get back ?</p></li></ol></li><li><p>Child Task</p><ol><li>Variable Set %newval, %par1 + 1, Do Maths add one to the value that was passed</li><li>Return %newval set %result in the parent to the value of %newval in the child</li></ol></li></ul><p>Result: the parent flashes 6</p><blockquote><p>Notes</p></blockquote><ul><li><p>changes made to %par1 and %par2 in the child task are not reflected by their changing in the parent task</p></li><li><p>receiving a return value is optional for the parent, even if the child tries to give it one</p></li><li><p>unlike Return statements in most computer languages, Tasker&#39;s does not necessarily stop the child task, so if the child and parent have the same priority they can both run together and the child return several results over time.</p></li></ul>`,50),l=[o];function i(p,r,c,h,d,u){return s(),e("div",null,l)}const f=a(t,[["render",i]]);export{C as __pageData,f as default};
